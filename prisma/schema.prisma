generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  
  workCalendars     Calendar[] @relation("WorkCalendars")
  personalCalendars Calendar[] @relation("PersonalCalendars")
  events           Event[]
  tasks            Task[]
  groupMemberships GroupMember[]
  createdGroups    Group[]
  notifications    Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Calendar {
  id           String      @id @default(cuid())
  name         String
  provider     String      // google, microsoft, apple
  externalId   String      // external calendar ID
  accessToken  String      @db.Text
  refreshToken String?     @db.Text
  isWork       Boolean     @default(false)
  color        String?
  
  workUserId     String?
  personalUserId String?
  
  workUser     User? @relation("WorkCalendars", fields: [workUserId], references: [id])
  personalUser User? @relation("PersonalCalendars", fields: [personalUserId], references: [id])
  
  events Event[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isAllDay    Boolean  @default(false)
  isWork      Boolean  @default(false)
  externalId  String?  // external event ID
  
  userId     String
  calendarId String
  
  user     User     @relation(fields: [userId], references: [id])
  calendar Calendar @relation(fields: [calendarId], references: [id])
  
  conflicts EventConflict[] @relation("ConflictEvent")
  conflictsWith EventConflict[] @relation("ConflictsWith")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id               String    @id @default(cuid())
  title            String
  description      String?
  dueDate          DateTime?
  estimatedMinutes Int?      // NLP estimated duration
  actualMinutes    Int?
  isCompleted      Boolean   @default(false)
  priority         String    @default("medium") // low, medium, high
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String @id @default(cuid())
  name        String
  description String?
  
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])
  
  members            GroupMember[]
  meetingSuggestions MeetingSuggestion[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id      String @id @default(cuid())
  groupId String
  userId  String
  role    String @default("member") // admin, member
  
  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
  
  @@unique([groupId, userId])
}

model MeetingSuggestion {
  id        String   @id @default(cuid())
  groupId   String
  title     String
  duration  Int      // in minutes
  startTime DateTime
  endTime   DateTime
  
  group Group @relation(fields: [groupId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventConflict {
  id         String @id @default(cuid())
  eventId    String
  conflictId String
  severity   String @default("overlap") // overlap, double_booking
  
  event     Event @relation("ConflictEvent", fields: [eventId], references: [id])
  conflicts Event @relation("ConflictsWith", fields: [conflictId], references: [id])
  
  @@unique([eventId, conflictId])
}

model Notification {
  id      String   @id @default(cuid())
  userId  String
  type    String   // event_reminder, task_due, availability_change, conflict_detected
  title   String
  message String
  isRead  Boolean  @default(false)
  data    Json?    // additional notification data
  
  user User @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
